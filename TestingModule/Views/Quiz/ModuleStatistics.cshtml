@model TestingModule.ViewModels.RealTimeStatisticsViewModel
@{
    ViewBag.Title = "ModuleStatistics";
    Layout = "~/Views/Shared/_LayoutStatistics.cshtml";
}

<div class="statistics_moduleName">Викторина "в реальном времени"</div>

<div id="timer">00:00</div>

<div class="questions"></div>

@*@Html.ActionLink("Зупинити модуль", "stopmodule", "admin", new { moduleHistoryId = Model.ModuleHistory.Id }, new { @class = "stopModule", @id = "stopModuleButton" })*@


@section scripts
{
    <script>
        var quiz = $.connection.quizHub;
        var intervalTime = 10000;
        var statisticsModel = @Html.Raw(Json.Encode(@Model));
        var totalCorrectAnswers = 1;
        var statisticsDynamicData = [];

        $.connection.hub.start().done(function() {
            /*quiz.server.queryRealTimeStats(Model, true).fail(function(error) {
                console.log('Invocation of NewContosoChatMessage failed. Error: ' + error);
            });*/
            retrieveResponses();
            sendInvintations();
        });

        statisticsModel.Questions.forEach(function(item, i) {
            statisticsDynamicData[i] = {
                questionId: item.Id,
                totalAnswersCount: 0
            }
        });

        quiz.client.recieveStatistics = function(questionId, studentsCount, groupId) {
            statisticsDynamicData.forEach(function(item) {
                if (item.questionId === questionId) {
                    item.totalAnswersCount++;
                }
                progress(item.questionId, item.totalAnswersCount, studentsCount);
            });
        };

        var groups = @Html.Raw(Json.Encode(Model.Groups.Select(g => g.Name)));

        function sendInvintations() {
            quiz.server.sendQVM(groups, @Model.ModuleHistory.Id);
            setInterval(function() { quiz.server.sendQVM(groups, @Model.ModuleHistory.Id) }, 5000);
        }

        function retrieveResponses() {
            quiz.server.queryRealTimeStats(statisticsModel, true);
            setInterval(function() { quiz.server.queryRealTimeStats(statisticsModel, true) }, intervalTime);
        }

        quiz.client.responseRecieved = function() {
            quiz.server.queryRealTimeStats(statisticsModel, false);
        };

        quiz.client.recieveRealTimeStatistics = function(realTimeStatistics) {
            realTimeStatistics.forEach(function(item) {
                progress(item.GroupId, item.QuestionId, item.CorrectAnswers, item.TotalAnswers);
            });
        }

        function zeroes(i) {
            if (i < 10) {
                i = "0" + i;
            }
            return i;
        }

        function timer(distance, element, status) {
            var x = setInterval(function () {
                var minutes = zeroes(Math.floor((distance / (1000 * 60))));
                var seconds = zeroes(Math.floor((distance % (1000 * 60)) / 1000));
                document.getElementById(element).innerHTML = minutes + ":" + seconds;
                distance = distance - 1000;
                if (distance < 0) {
                    clearInterval(x);
                    document.getElementById(element).innerHTML = "00:00";
                    status = false;
                }
            }, 1000);
        }

        timer(@Model.TimeLeft, 'timer', true);

    </script>
}
